pipeline {
    agent {
        docker {
image 'node:18-alpine' // since you're building/testing Node.js
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root'
        }
    }
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        IMAGE_NAME = 'myapp'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        KUBECONFIG = '/var/jenkins_home/.kube/config'
        minikube image load ${DOCKER_IMAGE}

        // Placeholder for Minikube image load, moved to the appropriate stage
    
    stages {
        stage('Checkout') {
            steps {
                git url: https://github.com/WhereareyouRAJ/Build-A-CI-CD-Pipeline.git            , branch: 'main'

            git url: 'https://github.com/WhereareyouRAJ/Build-A-CI-CD-Pipeline.git', branch: 'main'
        }
            steps {
                sh '''
                apt install -y curl bash git docker.io
               
                # Install kubectl
                curl -LO "https://dl.k8s.io/release/stable.txt"
                KUBECTL_VERSION=$(cat stable.txt)
                curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mv kubectl /usr/local/bin/

                # Install dependencies for pipeline
                apk add --no-cache curl bash git
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''
                # Start the container for testing
                docker run --rm ${DOCKER_IMAGE} npm test || true
                
                # Alternatively, you can run tests directly
                # npm install
                # npm test
                '''
            }
        }
        stage('Load Image into Minikube') {
           steps {
           sh 'minikube image load ${DOCKER_IMAGE}'
          }
       }
        stage('Deploy to Minikube') {
            steps {
                sh '''
                # Create or update deployment
                cat <<EOF | kubectl apply -f -
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: myapp-deployment
                  labels:
                    app: myapp
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app: myapp
                  template:
                    metadata:
                      labels:
                        app: myapp
                    spec:
                      containers:
                      - name: myapp
                        image: ${DOCKER_IMAGE}
                        ports:
                        - containerPort: 5000
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: myapp-service
                spec:
                  selector:
                    app: myapp
                  ports:
                  - port: 80
                    targetPort: 5000
                  type: NodePort
                EOF
                
                # Wait for deployment to be ready
                kubectl rollout status deployment/myapp-deployment
                
                # Get service URL
                echo "Application deployed. Access it using:"
                minikube service myapp-service --url
                '''
            }
        }
    }
    
    post {
        success {
            echo 'CI/CD Pipeline completed successfully!'
        }
        failure {
            echo 'CI/CD Pipeline failed!'
        }
        always {
            // Clean up
            sh 'docker rmi ${DOCKER_IMAGE} || true'
        }
    }
}